package tss

import (
	"time"

	bftbytes "github.com/cometbft/cometbft/libs/bytes"
	"github.com/cosmos/gogoproto/proto"
)

// SigningStatus is an enumeration of the possible statuses of a signing.
type SigningStatus int32

const (
	// SIGNING_STATUS_UNSPECIFIED is the status of a signing that has not been specified.
	SIGNING_STATUS_UNSPECIFIED SigningStatus = 0
	// SIGNING_STATUS_WAITING is the status of a signing that is waiting to be signed in the protocol.
	SIGNING_STATUS_WAITING SigningStatus = 1
	// SIGNING_STATUS_SUCCESS is the status of a signing that has success in the protocol.
	SIGNING_STATUS_SUCCESS SigningStatus = 2
	// SIGNING_STATUS_FALLEN is the status of a signing that has fallen out of the protocol.
	SIGNING_STATUS_FALLEN SigningStatus = 3
)

var SigningStatus_name = map[int32]string{
	0: "SIGNING_STATUS_UNSPECIFIED",
	1: "SIGNING_STATUS_WAITING",
	2: "SIGNING_STATUS_SUCCESS",
	3: "SIGNING_STATUS_FALLEN",
}

var SigningStatus_value = map[string]int32{
	"SIGNING_STATUS_UNSPECIFIED": 0,
	"SIGNING_STATUS_WAITING":     1,
	"SIGNING_STATUS_SUCCESS":     2,
	"SIGNING_STATUS_FALLEN":      3,
}

func (x SigningStatus) String() string {
	return proto.EnumName(SigningStatus_name, int32(x))
}

// Signing contains all necessary information for handling a signing request.
type Signing struct {
	// id is the unique identifier of the signing.
	ID SigningID `protobuf:"varint,1,opt,name=id,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.SigningID"                            json:"id,omitempty"`
	// current_attempt is the latest round number that signing has been attempted.
	CurrentAttempt uint64 `protobuf:"varint,2,opt,name=current_attempt,json=currentAttempt,proto3"                                                                    json:"current_attempt,omitempty"`
	// group_id is the unique identifier of the group.
	GroupID GroupID `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.GroupID"           json:"group_id,omitempty"`
	// group_pub_key is the public key of the group that sign this message.
	GroupPubKey Point `protobuf:"bytes,4,opt,name=group_pub_key,json=groupPubKey,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.Point"     json:"group_pub_key,omitempty"`
	// message is the message to be signed.
	Message bftbytes.HexBytes `protobuf:"bytes,5,opt,name=message,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes"                                       json:"message,omitempty"`
	// group_pub_nonce is the public nonce generated by the group for this signing process.
	GroupPubNonce Point `protobuf:"bytes,6,opt,name=group_pub_nonce,json=groupPubNonce,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.Point" json:"group_pub_nonce,omitempty"`
	// signature is the group's signature on the message.
	Signature Signature `protobuf:"bytes,7,opt,name=signature,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.Signature"                      json:"signature,omitempty"`
	// status represents the current stage of the signing in the signing process.
	Status SigningStatus `protobuf:"varint,8,opt,name=status,proto3,enum=band.tss.v1beta1.SigningStatus"                                                             json:"status,omitempty"`
	// created_height is the block height when the signing was created.
	CreatedHeight uint64 `protobuf:"varint,9,opt,name=created_height,json=createdHeight,proto3"                                                                      json:"created_height,omitempty"`
	// created_timestamp is the block timestamp when the signing was created.
	CreatedTimestamp time.Time `protobuf:"bytes,10,opt,name=created_timestamp,json=createdTimestamp,proto3,stdtime"                                                        json:"created_timestamp"`
}

// SigningAttempt contains a member that has been assigned to and expiration block height of
// the specific attempt.
type SigningAttempt struct {
	// signing_id is the unique identifier of the signing.
	SigningID SigningID `protobuf:"varint,1,opt,name=signing_id,json=signingId,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.SigningID" json:"signing_id,omitempty"`
	// attempt is the number of round that this signing has been attempted.
	Attempt uint64 `protobuf:"varint,2,opt,name=attempt,proto3"                                                                                            json:"attempt,omitempty"`
	// expired_height is the block height when this signing attempt was expired.
	ExpiredHeight uint64 `protobuf:"varint,3,opt,name=expired_height,json=expiredHeight,proto3"                                                                  json:"expired_height,omitempty"`
	// assigned_members is a list of members assigned to the signing process.
	AssignedMembers []AssignedMember `protobuf:"bytes,4,rep,name=assigned_members,json=assignedMembers,proto3"                                                               json:"assigned_members"`
}

// AssignedMember is a type representing a member that has been assigned to a signing process.
type AssignedMember struct {
	// member_id is the unique identifier of the member.
	MemberID MemberID `protobuf:"varint,1,opt,name=member_id,json=memberId,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.MemberID"        json:"member_id,omitempty"`
	// member is the human-readable name of the member.
	Address string `protobuf:"bytes,2,opt,name=address,proto3"                                                                                                 json:"address,omitempty"`
	// pub_key is the public part of a member.
	PubKey Point `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.Point"                json:"pub_key,omitempty"`
	// pub_d is the public part of a member's decryption key.
	PubD Point `protobuf:"bytes,4,opt,name=pub_d,json=pubD,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.Point"                    json:"pub_d,omitempty"`
	// pub_e is the public part of a member's encryption key.
	PubE Point `protobuf:"bytes,5,opt,name=pub_e,json=pubE,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.Point"                    json:"pub_e,omitempty"`
	// binding_factor is the binding factor of the member for the signing process.
	BindingFactor Scalar `protobuf:"bytes,6,opt,name=binding_factor,json=bindingFactor,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.Scalar" json:"binding_factor,omitempty"`
	// pub_nonce is the public nonce of the member for the signing process.
	PubNonce Point `protobuf:"bytes,7,opt,name=pub_nonce,json=pubNonce,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.Point"            json:"pub_nonce,omitempty"`
}

// PartialSignature contains information about a member's partial signature.
type PartialSignature struct {
	// signing_id is the unique identifier of the signing.
	SigningID SigningID `protobuf:"varint,1,opt,name=signing_id,json=signingId,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.SigningID" json:"signing_id,omitempty"`
	// signing_attempt is the number of attempts for this signing.
	SigningAttempt uint64 `protobuf:"varint,2,opt,name=signing_attempt,json=signingAttempt,proto3"                                                                json:"signing_attempt,omitempty"`
	// member_id is the identifier of the member providing the partial signature.
	MemberID MemberID `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.MemberID"    json:"member_id,omitempty"`
	// signature is the partial signature provided by this member.
	Signature Signature `protobuf:"bytes,4,opt,name=signature,proto3,casttype=github.com/bandprotocol/falcon/internal/bandchain/tss.Signature"                  json:"signature,omitempty"`
}

// EVMSignature defines a signature in the EVM format.
type EVMSignature struct {
	// r_address is the address of the nonce for using in the contract.
	RAddress bftbytes.HexBytes `protobuf:"bytes,1,opt,name=r_address,json=rAddress,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"r_address,omitempty"`
	// signature is the signature part for using in the contract.
	Signature bftbytes.HexBytes `protobuf:"bytes,2,opt,name=signature,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes"               json:"signature,omitempty"`
}

// SigningResult is a tss signing result from querying tss signing information.
type SigningResult struct {
	// signing is the tss signing result.
	Signing Signing `protobuf:"bytes,1,opt,name=signing,proto3"                                                    json:"signing"`
	// current_signing_attempt is the current attempt information of the signing.
	CurrentSigningAttempt *SigningAttempt `protobuf:"bytes,2,opt,name=current_signing_attempt,json=currentSigningAttempt,proto3"         json:"current_signing_attempt,omitempty"`
	// evm_signature is the signature in the format that can use directly in EVM.
	EVMSignature *EVMSignature `protobuf:"bytes,3,opt,name=evm_signature,json=evmSignature,proto3"                            json:"evm_signature,omitempty"`
	// received_partial_signatures is a list of received partial signatures.
	ReceivedPartialSignatures []PartialSignature `protobuf:"bytes,4,rep,name=received_partial_signatures,json=receivedPartialSignatures,proto3" json:"received_partial_signatures"`
}
