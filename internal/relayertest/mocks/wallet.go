// Code generated by MockGen. DO NOT EDIT.
// Source: relayer/wallet/wallet.go
//
// Generated by this command:
//
//	mockgen -source=relayer/wallet/wallet.go -package mocks -destination internal/relayertest/mocks/wallet.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	ecdsa "crypto/ecdsa"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWallet is a mock of Wallet interface.
type MockWallet struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMockRecorder
	isgomock struct{}
}

// MockWalletMockRecorder is the mock recorder for MockWallet.
type MockWalletMockRecorder struct {
	mock *MockWallet
}

// NewMockWallet creates a new mock instance.
func NewMockWallet(ctrl *gomock.Controller) *MockWallet {
	mock := &MockWallet{ctrl: ctrl}
	mock.recorder = &MockWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWallet) EXPECT() *MockWalletMockRecorder {
	return m.recorder
}

// DeletePrivateKey mocks base method.
func (m *MockWallet) DeletePrivateKey(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateKey", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrivateKey indicates an expected call of DeletePrivateKey.
func (mr *MockWalletMockRecorder) DeletePrivateKey(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateKey", reflect.TypeOf((*MockWallet)(nil).DeletePrivateKey), name)
}

// ExportPrivateKey mocks base method.
func (m *MockWallet) ExportPrivateKey(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPrivateKey", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPrivateKey indicates an expected call of ExportPrivateKey.
func (mr *MockWalletMockRecorder) ExportPrivateKey(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPrivateKey", reflect.TypeOf((*MockWallet)(nil).ExportPrivateKey), name)
}

// GetAddress mocks base method.
func (m *MockWallet) GetAddress(name string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockWalletMockRecorder) GetAddress(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockWallet)(nil).GetAddress), name)
}

// GetNames mocks base method.
func (m *MockWallet) GetNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetNames indicates an expected call of GetNames.
func (mr *MockWalletMockRecorder) GetNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNames", reflect.TypeOf((*MockWallet)(nil).GetNames))
}

// SavePrivateKey mocks base method.
func (m *MockWallet) SavePrivateKey(name string, privKey *ecdsa.PrivateKey) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePrivateKey", name, privKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePrivateKey indicates an expected call of SavePrivateKey.
func (mr *MockWalletMockRecorder) SavePrivateKey(name, privKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePrivateKey", reflect.TypeOf((*MockWallet)(nil).SavePrivateKey), name, privKey)
}

// Sign mocks base method.
func (m *MockWallet) Sign(name string, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", name, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockWalletMockRecorder) Sign(name, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockWallet)(nil).Sign), name, data)
}
