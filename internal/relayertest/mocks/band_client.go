// Code generated by MockGen. DO NOT EDIT.
// Source: relayer/band/client.go
//
// Generated by this command:
//
//	mockgen -source=relayer/band/client.go -package mocks -destination internal/relayertest/mocks/band_client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/bandprotocol/falcon/relayer/band/types"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetTunnel mocks base method.
func (m *MockClient) GetTunnel(ctx context.Context, tunnelID uint64) (*types.Tunnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnel", ctx, tunnelID)
	ret0, _ := ret[0].(*types.Tunnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnel indicates an expected call of GetTunnel.
func (mr *MockClientMockRecorder) GetTunnel(ctx, tunnelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnel", reflect.TypeOf((*MockClient)(nil).GetTunnel), ctx, tunnelID)
}

// GetTunnelPacket mocks base method.
func (m *MockClient) GetTunnelPacket(ctx context.Context, tunnelID, sequence uint64) (*types.Packet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnelPacket", ctx, tunnelID, sequence)
	ret0, _ := ret[0].(*types.Packet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnelPacket indicates an expected call of GetTunnelPacket.
func (mr *MockClientMockRecorder) GetTunnelPacket(ctx, tunnelID, sequence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnelPacket", reflect.TypeOf((*MockClient)(nil).GetTunnelPacket), ctx, tunnelID, sequence)
}

// GetTunnels mocks base method.
func (m *MockClient) GetTunnels(ctx context.Context) ([]types.Tunnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnels", ctx)
	ret0, _ := ret[0].([]types.Tunnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnels indicates an expected call of GetTunnels.
func (mr *MockClientMockRecorder) GetTunnels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnels", reflect.TypeOf((*MockClient)(nil).GetTunnels), ctx)
}

// HandleProducePacketSuccess mocks base method.
func (m *MockClient) HandleProducePacketSuccess(handler func(uint64)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleProducePacketSuccess", handler)
}

// HandleProducePacketSuccess indicates an expected call of HandleProducePacketSuccess.
func (mr *MockClientMockRecorder) HandleProducePacketSuccess(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleProducePacketSuccess", reflect.TypeOf((*MockClient)(nil).HandleProducePacketSuccess), handler)
}

// Init mocks base method.
func (m *MockClient) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockClientMockRecorder) Init(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockClient)(nil).Init), ctx)
}

// Subscribe mocks base method.
func (m *MockClient) Subscribe(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockClientMockRecorder) Subscribe(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockClient)(nil).Subscribe), ctx)
}
