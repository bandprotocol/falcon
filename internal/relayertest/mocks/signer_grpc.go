// Code generated by MockGen. DO NOT EDIT.
// Source: proto/fkms/v1/signer_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=proto/fkms/v1/signer_grpc.pb.go -package mocks -destination internal/relayertest/mocks/signer_grpc.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	fkmsv1 "github.com/bandprotocol/falcon/proto/fkms/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFkmsServiceClient is a mock of FkmsServiceClient interface.
type MockFkmsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFkmsServiceClientMockRecorder
	isgomock struct{}
}

// MockFkmsServiceClientMockRecorder is the mock recorder for MockFkmsServiceClient.
type MockFkmsServiceClientMockRecorder struct {
	mock *MockFkmsServiceClient
}

// NewMockFkmsServiceClient creates a new mock instance.
func NewMockFkmsServiceClient(ctrl *gomock.Controller) *MockFkmsServiceClient {
	mock := &MockFkmsServiceClient{ctrl: ctrl}
	mock.recorder = &MockFkmsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFkmsServiceClient) EXPECT() *MockFkmsServiceClientMockRecorder {
	return m.recorder
}

// GetSignerAddresses mocks base method.
func (m *MockFkmsServiceClient) GetSignerAddresses(ctx context.Context, in *fkmsv1.GetSignerAddressesRequest, opts ...grpc.CallOption) (*fkmsv1.GetSignerAddressesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSignerAddresses", varargs...)
	ret0, _ := ret[0].(*fkmsv1.GetSignerAddressesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignerAddresses indicates an expected call of GetSignerAddresses.
func (mr *MockFkmsServiceClientMockRecorder) GetSignerAddresses(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignerAddresses", reflect.TypeOf((*MockFkmsServiceClient)(nil).GetSignerAddresses), varargs...)
}

// SignEvm mocks base method.
func (m *MockFkmsServiceClient) SignEvm(ctx context.Context, in *fkmsv1.SignEvmRequest, opts ...grpc.CallOption) (*fkmsv1.SignEvmResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignEvm", varargs...)
	ret0, _ := ret[0].(*fkmsv1.SignEvmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignEvm indicates an expected call of SignEvm.
func (mr *MockFkmsServiceClientMockRecorder) SignEvm(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignEvm", reflect.TypeOf((*MockFkmsServiceClient)(nil).SignEvm), varargs...)
}

// MockFkmsServiceServer is a mock of FkmsServiceServer interface.
type MockFkmsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFkmsServiceServerMockRecorder
	isgomock struct{}
}

// MockFkmsServiceServerMockRecorder is the mock recorder for MockFkmsServiceServer.
type MockFkmsServiceServerMockRecorder struct {
	mock *MockFkmsServiceServer
}

// NewMockFkmsServiceServer creates a new mock instance.
func NewMockFkmsServiceServer(ctrl *gomock.Controller) *MockFkmsServiceServer {
	mock := &MockFkmsServiceServer{ctrl: ctrl}
	mock.recorder = &MockFkmsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFkmsServiceServer) EXPECT() *MockFkmsServiceServerMockRecorder {
	return m.recorder
}

// GetSignerAddresses mocks base method.
func (m *MockFkmsServiceServer) GetSignerAddresses(arg0 context.Context, arg1 *fkmsv1.GetSignerAddressesRequest) (*fkmsv1.GetSignerAddressesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignerAddresses", arg0, arg1)
	ret0, _ := ret[0].(*fkmsv1.GetSignerAddressesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignerAddresses indicates an expected call of GetSignerAddresses.
func (mr *MockFkmsServiceServerMockRecorder) GetSignerAddresses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignerAddresses", reflect.TypeOf((*MockFkmsServiceServer)(nil).GetSignerAddresses), arg0, arg1)
}

// SignEvm mocks base method.
func (m *MockFkmsServiceServer) SignEvm(arg0 context.Context, arg1 *fkmsv1.SignEvmRequest) (*fkmsv1.SignEvmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignEvm", arg0, arg1)
	ret0, _ := ret[0].(*fkmsv1.SignEvmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignEvm indicates an expected call of SignEvm.
func (mr *MockFkmsServiceServerMockRecorder) SignEvm(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignEvm", reflect.TypeOf((*MockFkmsServiceServer)(nil).SignEvm), arg0, arg1)
}

// mustEmbedUnimplementedFkmsServiceServer mocks base method.
func (m *MockFkmsServiceServer) mustEmbedUnimplementedFkmsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFkmsServiceServer")
}

// mustEmbedUnimplementedFkmsServiceServer indicates an expected call of mustEmbedUnimplementedFkmsServiceServer.
func (mr *MockFkmsServiceServerMockRecorder) mustEmbedUnimplementedFkmsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFkmsServiceServer", reflect.TypeOf((*MockFkmsServiceServer)(nil).mustEmbedUnimplementedFkmsServiceServer))
}

// MockUnsafeFkmsServiceServer is a mock of UnsafeFkmsServiceServer interface.
type MockUnsafeFkmsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFkmsServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeFkmsServiceServerMockRecorder is the mock recorder for MockUnsafeFkmsServiceServer.
type MockUnsafeFkmsServiceServerMockRecorder struct {
	mock *MockUnsafeFkmsServiceServer
}

// NewMockUnsafeFkmsServiceServer creates a new mock instance.
func NewMockUnsafeFkmsServiceServer(ctrl *gomock.Controller) *MockUnsafeFkmsServiceServer {
	mock := &MockUnsafeFkmsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFkmsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFkmsServiceServer) EXPECT() *MockUnsafeFkmsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFkmsServiceServer mocks base method.
func (m *MockUnsafeFkmsServiceServer) mustEmbedUnimplementedFkmsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFkmsServiceServer")
}

// mustEmbedUnimplementedFkmsServiceServer indicates an expected call of mustEmbedUnimplementedFkmsServiceServer.
func (mr *MockUnsafeFkmsServiceServerMockRecorder) mustEmbedUnimplementedFkmsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFkmsServiceServer", reflect.TypeOf((*MockUnsafeFkmsServiceServer)(nil).mustEmbedUnimplementedFkmsServiceServer))
}
