// Code generated by MockGen. DO NOT EDIT.
// Source: proto/kms/signer_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=proto/kms/signer_grpc.pb.go -package mocks -destination internal/relayertest/mocks/signer_grpc.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kms "github.com/bandprotocol/falcon/proto/kms"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockKmsEvmServiceClient is a mock of KmsEvmServiceClient interface.
type MockKmsEvmServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockKmsEvmServiceClientMockRecorder
	isgomock struct{}
}

// MockKmsEvmServiceClientMockRecorder is the mock recorder for MockKmsEvmServiceClient.
type MockKmsEvmServiceClientMockRecorder struct {
	mock *MockKmsEvmServiceClient
}

// NewMockKmsEvmServiceClient creates a new mock instance.
func NewMockKmsEvmServiceClient(ctrl *gomock.Controller) *MockKmsEvmServiceClient {
	mock := &MockKmsEvmServiceClient{ctrl: ctrl}
	mock.recorder = &MockKmsEvmServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKmsEvmServiceClient) EXPECT() *MockKmsEvmServiceClientMockRecorder {
	return m.recorder
}

// SignEvm mocks base method.
func (m *MockKmsEvmServiceClient) SignEvm(ctx context.Context, in *kms.SignEvmRequest, opts ...grpc.CallOption) (*kms.SignEvmResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignEvm", varargs...)
	ret0, _ := ret[0].(*kms.SignEvmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignEvm indicates an expected call of SignEvm.
func (mr *MockKmsEvmServiceClientMockRecorder) SignEvm(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignEvm", reflect.TypeOf((*MockKmsEvmServiceClient)(nil).SignEvm), varargs...)
}

// MockKmsEvmServiceServer is a mock of KmsEvmServiceServer interface.
type MockKmsEvmServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockKmsEvmServiceServerMockRecorder
	isgomock struct{}
}

// MockKmsEvmServiceServerMockRecorder is the mock recorder for MockKmsEvmServiceServer.
type MockKmsEvmServiceServerMockRecorder struct {
	mock *MockKmsEvmServiceServer
}

// NewMockKmsEvmServiceServer creates a new mock instance.
func NewMockKmsEvmServiceServer(ctrl *gomock.Controller) *MockKmsEvmServiceServer {
	mock := &MockKmsEvmServiceServer{ctrl: ctrl}
	mock.recorder = &MockKmsEvmServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKmsEvmServiceServer) EXPECT() *MockKmsEvmServiceServerMockRecorder {
	return m.recorder
}

// SignEvm mocks base method.
func (m *MockKmsEvmServiceServer) SignEvm(arg0 context.Context, arg1 *kms.SignEvmRequest) (*kms.SignEvmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignEvm", arg0, arg1)
	ret0, _ := ret[0].(*kms.SignEvmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignEvm indicates an expected call of SignEvm.
func (mr *MockKmsEvmServiceServerMockRecorder) SignEvm(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignEvm", reflect.TypeOf((*MockKmsEvmServiceServer)(nil).SignEvm), arg0, arg1)
}

// mustEmbedUnimplementedKmsEvmServiceServer mocks base method.
func (m *MockKmsEvmServiceServer) mustEmbedUnimplementedKmsEvmServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKmsEvmServiceServer")
}

// mustEmbedUnimplementedKmsEvmServiceServer indicates an expected call of mustEmbedUnimplementedKmsEvmServiceServer.
func (mr *MockKmsEvmServiceServerMockRecorder) mustEmbedUnimplementedKmsEvmServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKmsEvmServiceServer", reflect.TypeOf((*MockKmsEvmServiceServer)(nil).mustEmbedUnimplementedKmsEvmServiceServer))
}

// MockUnsafeKmsEvmServiceServer is a mock of UnsafeKmsEvmServiceServer interface.
type MockUnsafeKmsEvmServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeKmsEvmServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeKmsEvmServiceServerMockRecorder is the mock recorder for MockUnsafeKmsEvmServiceServer.
type MockUnsafeKmsEvmServiceServerMockRecorder struct {
	mock *MockUnsafeKmsEvmServiceServer
}

// NewMockUnsafeKmsEvmServiceServer creates a new mock instance.
func NewMockUnsafeKmsEvmServiceServer(ctrl *gomock.Controller) *MockUnsafeKmsEvmServiceServer {
	mock := &MockUnsafeKmsEvmServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeKmsEvmServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeKmsEvmServiceServer) EXPECT() *MockUnsafeKmsEvmServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedKmsEvmServiceServer mocks base method.
func (m *MockUnsafeKmsEvmServiceServer) mustEmbedUnimplementedKmsEvmServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKmsEvmServiceServer")
}

// mustEmbedUnimplementedKmsEvmServiceServer indicates an expected call of mustEmbedUnimplementedKmsEvmServiceServer.
func (mr *MockUnsafeKmsEvmServiceServerMockRecorder) mustEmbedUnimplementedKmsEvmServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKmsEvmServiceServer", reflect.TypeOf((*MockUnsafeKmsEvmServiceServer)(nil).mustEmbedUnimplementedKmsEvmServiceServer))
}
