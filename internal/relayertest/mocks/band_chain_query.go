// Code generated by MockGen. DO NOT EDIT.
// Source: relayer/band/query.go
//
// Generated by this command:
//
//	mockgen -source=relayer/band/query.go -package mocks -destination internal/relayertest/mocks/band_chain_query.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/bandprotocol/falcon/internal/bandchain/bandtss"
	types0 "github.com/bandprotocol/falcon/internal/bandchain/tunnel"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockQueryClient is a mock of QueryClient interface.
type MockQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryClientMockRecorder
	isgomock struct{}
}

// MockQueryClientMockRecorder is the mock recorder for MockQueryClient.
type MockQueryClientMockRecorder struct {
	mock *MockQueryClient
}

// NewMockQueryClient creates a new mock instance.
func NewMockQueryClient(ctrl *gomock.Controller) *MockQueryClient {
	mock := &MockQueryClient{ctrl: ctrl}
	mock.recorder = &MockQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryClient) EXPECT() *MockQueryClientMockRecorder {
	return m.recorder
}

// Packet mocks base method.
func (m *MockQueryClient) Packet(ctx context.Context, in *types0.QueryPacketRequest, opts ...grpc.CallOption) (*types0.QueryPacketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Packet", varargs...)
	ret0, _ := ret[0].(*types0.QueryPacketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Packet indicates an expected call of Packet.
func (mr *MockQueryClientMockRecorder) Packet(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packet", reflect.TypeOf((*MockQueryClient)(nil).Packet), varargs...)
}

// Signing mocks base method.
func (m *MockQueryClient) Signing(ctx context.Context, in *types.QuerySigningRequest, opts ...grpc.CallOption) (*types.QuerySigningResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Signing", varargs...)
	ret0, _ := ret[0].(*types.QuerySigningResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signing indicates an expected call of Signing.
func (mr *MockQueryClientMockRecorder) Signing(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signing", reflect.TypeOf((*MockQueryClient)(nil).Signing), varargs...)
}

// Tunnel mocks base method.
func (m *MockQueryClient) Tunnel(ctx context.Context, in *types0.QueryTunnelRequest, opts ...grpc.CallOption) (*types0.QueryTunnelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tunnel", varargs...)
	ret0, _ := ret[0].(*types0.QueryTunnelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tunnel indicates an expected call of Tunnel.
func (mr *MockQueryClientMockRecorder) Tunnel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tunnel", reflect.TypeOf((*MockQueryClient)(nil).Tunnel), varargs...)
}

// Tunnels mocks base method.
func (m *MockQueryClient) Tunnels(ctx context.Context, in *types0.QueryTunnelsRequest, opts ...grpc.CallOption) (*types0.QueryTunnelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tunnels", varargs...)
	ret0, _ := ret[0].(*types0.QueryTunnelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tunnels indicates an expected call of Tunnels.
func (mr *MockQueryClientMockRecorder) Tunnels(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tunnels", reflect.TypeOf((*MockQueryClient)(nil).Tunnels), varargs...)
}
