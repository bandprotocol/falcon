// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bandprotocol/chain/v3/x/bandtss/types (interfaces: QueryClient)
//
// Generated by this command:
//
//	mockgen -package mocks -mock_names QueryClient=MockBandtssQueryClient -destination internal/relayertest/mocks/bandtss_query_client.go github.com/bandprotocol/chain/v3/x/bandtss/types QueryClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/bandprotocol/chain/v3/x/bandtss/types"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBandtssQueryClient is a mock of QueryClient interface.
type MockBandtssQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockBandtssQueryClientMockRecorder
	isgomock struct{}
}

// MockBandtssQueryClientMockRecorder is the mock recorder for MockBandtssQueryClient.
type MockBandtssQueryClientMockRecorder struct {
	mock *MockBandtssQueryClient
}

// NewMockBandtssQueryClient creates a new mock instance.
func NewMockBandtssQueryClient(ctrl *gomock.Controller) *MockBandtssQueryClient {
	mock := &MockBandtssQueryClient{ctrl: ctrl}
	mock.recorder = &MockBandtssQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBandtssQueryClient) EXPECT() *MockBandtssQueryClientMockRecorder {
	return m.recorder
}

// Counts mocks base method.
func (m *MockBandtssQueryClient) Counts(ctx context.Context, in *types.QueryCountsRequest, opts ...grpc.CallOption) (*types.QueryCountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Counts", varargs...)
	ret0, _ := ret[0].(*types.QueryCountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Counts indicates an expected call of Counts.
func (mr *MockBandtssQueryClientMockRecorder) Counts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counts", reflect.TypeOf((*MockBandtssQueryClient)(nil).Counts), varargs...)
}

// CurrentGroup mocks base method.
func (m *MockBandtssQueryClient) CurrentGroup(ctx context.Context, in *types.QueryCurrentGroupRequest, opts ...grpc.CallOption) (*types.QueryCurrentGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CurrentGroup", varargs...)
	ret0, _ := ret[0].(*types.QueryCurrentGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentGroup indicates an expected call of CurrentGroup.
func (mr *MockBandtssQueryClientMockRecorder) CurrentGroup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentGroup", reflect.TypeOf((*MockBandtssQueryClient)(nil).CurrentGroup), varargs...)
}

// GroupTransition mocks base method.
func (m *MockBandtssQueryClient) GroupTransition(ctx context.Context, in *types.QueryGroupTransitionRequest, opts ...grpc.CallOption) (*types.QueryGroupTransitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupTransition", varargs...)
	ret0, _ := ret[0].(*types.QueryGroupTransitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupTransition indicates an expected call of GroupTransition.
func (mr *MockBandtssQueryClientMockRecorder) GroupTransition(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupTransition", reflect.TypeOf((*MockBandtssQueryClient)(nil).GroupTransition), varargs...)
}

// IncomingGroup mocks base method.
func (m *MockBandtssQueryClient) IncomingGroup(ctx context.Context, in *types.QueryIncomingGroupRequest, opts ...grpc.CallOption) (*types.QueryIncomingGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IncomingGroup", varargs...)
	ret0, _ := ret[0].(*types.QueryIncomingGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncomingGroup indicates an expected call of IncomingGroup.
func (mr *MockBandtssQueryClientMockRecorder) IncomingGroup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncomingGroup", reflect.TypeOf((*MockBandtssQueryClient)(nil).IncomingGroup), varargs...)
}

// Member mocks base method.
func (m *MockBandtssQueryClient) Member(ctx context.Context, in *types.QueryMemberRequest, opts ...grpc.CallOption) (*types.QueryMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Member", varargs...)
	ret0, _ := ret[0].(*types.QueryMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Member indicates an expected call of Member.
func (mr *MockBandtssQueryClientMockRecorder) Member(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Member", reflect.TypeOf((*MockBandtssQueryClient)(nil).Member), varargs...)
}

// Members mocks base method.
func (m *MockBandtssQueryClient) Members(ctx context.Context, in *types.QueryMembersRequest, opts ...grpc.CallOption) (*types.QueryMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Members", varargs...)
	ret0, _ := ret[0].(*types.QueryMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Members indicates an expected call of Members.
func (mr *MockBandtssQueryClientMockRecorder) Members(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockBandtssQueryClient)(nil).Members), varargs...)
}

// Params mocks base method.
func (m *MockBandtssQueryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockBandtssQueryClientMockRecorder) Params(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockBandtssQueryClient)(nil).Params), varargs...)
}

// Signing mocks base method.
func (m *MockBandtssQueryClient) Signing(ctx context.Context, in *types.QuerySigningRequest, opts ...grpc.CallOption) (*types.QuerySigningResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Signing", varargs...)
	ret0, _ := ret[0].(*types.QuerySigningResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signing indicates an expected call of Signing.
func (mr *MockBandtssQueryClientMockRecorder) Signing(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signing", reflect.TypeOf((*MockBandtssQueryClient)(nil).Signing), varargs...)
}
