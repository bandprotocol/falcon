// Code generated by MockGen. DO NOT EDIT.
// Source: relayer/chains/evm/client.go
//
// Generated by this command:
//
//	mockgen -source=relayer/chains/evm/client.go -mock_names Client=MockEVMClient -package mocks -destination internal/relayertest/mocks/chain_evm_client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"
	time "time"

	ethereum "github.com/ethereum/go-ethereum"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockEVMClient is a mock of Client interface.
type MockEVMClient struct {
	ctrl     *gomock.Controller
	recorder *MockEVMClientMockRecorder
	isgomock struct{}
}

// MockEVMClientMockRecorder is the mock recorder for MockEVMClient.
type MockEVMClientMockRecorder struct {
	mock *MockEVMClient
}

// NewMockEVMClient creates a new mock instance.
func NewMockEVMClient(ctrl *gomock.Controller) *MockEVMClient {
	mock := &MockEVMClient{ctrl: ctrl}
	mock.recorder = &MockEVMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEVMClient) EXPECT() *MockEVMClientMockRecorder {
	return m.recorder
}

// BroadcastTx mocks base method.
func (m *MockEVMClient) BroadcastTx(ctx context.Context, tx *types.Transaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTx", ctx, tx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTx indicates an expected call of BroadcastTx.
func (mr *MockEVMClientMockRecorder) BroadcastTx(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTx", reflect.TypeOf((*MockEVMClient)(nil).BroadcastTx), ctx, tx)
}

// CheckAndConnect mocks base method.
func (m *MockEVMClient) CheckAndConnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndConnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAndConnect indicates an expected call of CheckAndConnect.
func (mr *MockEVMClientMockRecorder) CheckAndConnect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndConnect", reflect.TypeOf((*MockEVMClient)(nil).CheckAndConnect), ctx)
}

// Connect mocks base method.
func (m *MockEVMClient) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockEVMClientMockRecorder) Connect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockEVMClient)(nil).Connect), ctx)
}

// EstimateBaseFee mocks base method.
func (m *MockEVMClient) EstimateBaseFee(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateBaseFee", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateBaseFee indicates an expected call of EstimateBaseFee.
func (mr *MockEVMClientMockRecorder) EstimateBaseFee(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateBaseFee", reflect.TypeOf((*MockEVMClient)(nil).EstimateBaseFee), ctx)
}

// EstimateGas mocks base method.
func (m *MockEVMClient) EstimateGas(ctx context.Context, msg ethereum.CallMsg) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, msg)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas.
func (mr *MockEVMClientMockRecorder) EstimateGas(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockEVMClient)(nil).EstimateGas), ctx, msg)
}

// EstimateGasPrice mocks base method.
func (m *MockEVMClient) EstimateGasPrice(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGasPrice", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGasPrice indicates an expected call of EstimateGasPrice.
func (mr *MockEVMClientMockRecorder) EstimateGasPrice(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGasPrice", reflect.TypeOf((*MockEVMClient)(nil).EstimateGasPrice), ctx)
}

// EstimateGasTipCap mocks base method.
func (m *MockEVMClient) EstimateGasTipCap(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGasTipCap", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGasTipCap indicates an expected call of EstimateGasTipCap.
func (mr *MockEVMClientMockRecorder) EstimateGasTipCap(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGasTipCap", reflect.TypeOf((*MockEVMClient)(nil).EstimateGasTipCap), ctx)
}

// GetBalance mocks base method.
func (m *MockEVMClient) GetBalance(ctx context.Context, gethAddr common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, gethAddr)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockEVMClientMockRecorder) GetBalance(ctx, gethAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockEVMClient)(nil).GetBalance), ctx, gethAddr)
}

// GetBlockHeight mocks base method.
func (m *MockEVMClient) GetBlockHeight(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeight", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock mocks base method. This should never be called in test
func (m *MockEVMClient) GetBlock(ctx context.Context, height *big.Int) (*types.Block, error) {
	return nil, nil
}

// GetBlockHeight indicates an expected call of GetBlockHeight.
func (mr *MockEVMClientMockRecorder) GetBlockHeight(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeight", reflect.TypeOf((*MockEVMClient)(nil).GetBlockHeight), ctx)
}

// GetTxReceipt mocks base method.
func (m *MockEVMClient) GetTxReceipt(ctx context.Context, txHash string) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxReceipt", ctx, txHash)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxReceipt indicates an expected call of GetTxReceipt.
func (mr *MockEVMClientMockRecorder) GetTxReceipt(ctx, txHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxReceipt", reflect.TypeOf((*MockEVMClient)(nil).GetTxReceipt), ctx, txHash)
}

// PendingNonceAt mocks base method.
func (m *MockEVMClient) PendingNonceAt(ctx context.Context, address common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingNonceAt", ctx, address)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingNonceAt indicates an expected call of PendingNonceAt.
func (mr *MockEVMClientMockRecorder) PendingNonceAt(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingNonceAt", reflect.TypeOf((*MockEVMClient)(nil).PendingNonceAt), ctx, address)
}

// Query mocks base method.
func (m *MockEVMClient) Query(ctx context.Context, gethAddr common.Address, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, gethAddr, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockEVMClientMockRecorder) Query(ctx, gethAddr, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockEVMClient)(nil).Query), ctx, gethAddr, data)
}

// StartLivelinessCheck mocks base method.
func (m *MockEVMClient) StartLivelinessCheck(ctx context.Context, interval time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartLivelinessCheck", ctx, interval)
}

// StartLivelinessCheck indicates an expected call of StartLivelinessCheck.
func (mr *MockEVMClientMockRecorder) StartLivelinessCheck(ctx, interval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLivelinessCheck", reflect.TypeOf((*MockEVMClient)(nil).StartLivelinessCheck), ctx, interval)
}
