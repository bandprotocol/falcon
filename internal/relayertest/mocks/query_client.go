// Code generated by MockGen. DO NOT EDIT.
// Source: relayer/band/types/query.pb.go
//
// Generated by this command:
//
//	mockgen -source=relayer/band/types/query.pb.go -package mocks -destination internal/relayertest/mocks/query_client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/bandprotocol/falcon/relayer/band/types"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockQueryClient is a mock of QueryClient interface.
type MockQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryClientMockRecorder
	isgomock struct{}
}

// MockQueryClientMockRecorder is the mock recorder for MockQueryClient.
type MockQueryClientMockRecorder struct {
	mock *MockQueryClient
}

// NewMockQueryClient creates a new mock instance.
func NewMockQueryClient(ctrl *gomock.Controller) *MockQueryClient {
	mock := &MockQueryClient{ctrl: ctrl}
	mock.recorder = &MockQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryClient) EXPECT() *MockQueryClientMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockQueryClient) Deposit(ctx context.Context, in *types.QueryDepositRequest, opts ...grpc.CallOption) (*types.QueryDepositResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deposit", varargs...)
	ret0, _ := ret[0].(*types.QueryDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockQueryClientMockRecorder) Deposit(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockQueryClient)(nil).Deposit), varargs...)
}

// Deposits mocks base method.
func (m *MockQueryClient) Deposits(ctx context.Context, in *types.QueryDepositsRequest, opts ...grpc.CallOption) (*types.QueryDepositsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deposits", varargs...)
	ret0, _ := ret[0].(*types.QueryDepositsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposits indicates an expected call of Deposits.
func (mr *MockQueryClientMockRecorder) Deposits(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposits", reflect.TypeOf((*MockQueryClient)(nil).Deposits), varargs...)
}

// Packet mocks base method.
func (m *MockQueryClient) Packet(ctx context.Context, in *types.QueryPacketRequest, opts ...grpc.CallOption) (*types.QueryPacketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Packet", varargs...)
	ret0, _ := ret[0].(*types.QueryPacketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Packet indicates an expected call of Packet.
func (mr *MockQueryClientMockRecorder) Packet(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packet", reflect.TypeOf((*MockQueryClient)(nil).Packet), varargs...)
}

// Packets mocks base method.
func (m *MockQueryClient) Packets(ctx context.Context, in *types.QueryPacketsRequest, opts ...grpc.CallOption) (*types.QueryPacketsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Packets", varargs...)
	ret0, _ := ret[0].(*types.QueryPacketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Packets indicates an expected call of Packets.
func (mr *MockQueryClientMockRecorder) Packets(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packets", reflect.TypeOf((*MockQueryClient)(nil).Packets), varargs...)
}

// Params mocks base method.
func (m *MockQueryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockQueryClientMockRecorder) Params(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockQueryClient)(nil).Params), varargs...)
}

// Tunnel mocks base method.
func (m *MockQueryClient) Tunnel(ctx context.Context, in *types.QueryTunnelRequest, opts ...grpc.CallOption) (*types.QueryTunnelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tunnel", varargs...)
	ret0, _ := ret[0].(*types.QueryTunnelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tunnel indicates an expected call of Tunnel.
func (mr *MockQueryClientMockRecorder) Tunnel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tunnel", reflect.TypeOf((*MockQueryClient)(nil).Tunnel), varargs...)
}

// Tunnels mocks base method.
func (m *MockQueryClient) Tunnels(ctx context.Context, in *types.QueryTunnelsRequest, opts ...grpc.CallOption) (*types.QueryTunnelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tunnels", varargs...)
	ret0, _ := ret[0].(*types.QueryTunnelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tunnels indicates an expected call of Tunnels.
func (mr *MockQueryClientMockRecorder) Tunnels(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tunnels", reflect.TypeOf((*MockQueryClient)(nil).Tunnels), varargs...)
}

// MockQueryServer is a mock of QueryServer interface.
type MockQueryServer struct {
	ctrl     *gomock.Controller
	recorder *MockQueryServerMockRecorder
	isgomock struct{}
}

// MockQueryServerMockRecorder is the mock recorder for MockQueryServer.
type MockQueryServerMockRecorder struct {
	mock *MockQueryServer
}

// NewMockQueryServer creates a new mock instance.
func NewMockQueryServer(ctrl *gomock.Controller) *MockQueryServer {
	mock := &MockQueryServer{ctrl: ctrl}
	mock.recorder = &MockQueryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryServer) EXPECT() *MockQueryServerMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockQueryServer) Deposit(arg0 context.Context, arg1 *types.QueryDepositRequest) (*types.QueryDepositResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockQueryServerMockRecorder) Deposit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockQueryServer)(nil).Deposit), arg0, arg1)
}

// Deposits mocks base method.
func (m *MockQueryServer) Deposits(arg0 context.Context, arg1 *types.QueryDepositsRequest) (*types.QueryDepositsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposits", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryDepositsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposits indicates an expected call of Deposits.
func (mr *MockQueryServerMockRecorder) Deposits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposits", reflect.TypeOf((*MockQueryServer)(nil).Deposits), arg0, arg1)
}

// Packet mocks base method.
func (m *MockQueryServer) Packet(arg0 context.Context, arg1 *types.QueryPacketRequest) (*types.QueryPacketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packet", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryPacketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Packet indicates an expected call of Packet.
func (mr *MockQueryServerMockRecorder) Packet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packet", reflect.TypeOf((*MockQueryServer)(nil).Packet), arg0, arg1)
}

// Packets mocks base method.
func (m *MockQueryServer) Packets(arg0 context.Context, arg1 *types.QueryPacketsRequest) (*types.QueryPacketsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packets", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryPacketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Packets indicates an expected call of Packets.
func (mr *MockQueryServerMockRecorder) Packets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packets", reflect.TypeOf((*MockQueryServer)(nil).Packets), arg0, arg1)
}

// Params mocks base method.
func (m *MockQueryServer) Params(arg0 context.Context, arg1 *types.QueryParamsRequest) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockQueryServerMockRecorder) Params(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockQueryServer)(nil).Params), arg0, arg1)
}

// Tunnel mocks base method.
func (m *MockQueryServer) Tunnel(arg0 context.Context, arg1 *types.QueryTunnelRequest) (*types.QueryTunnelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tunnel", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryTunnelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tunnel indicates an expected call of Tunnel.
func (mr *MockQueryServerMockRecorder) Tunnel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tunnel", reflect.TypeOf((*MockQueryServer)(nil).Tunnel), arg0, arg1)
}

// Tunnels mocks base method.
func (m *MockQueryServer) Tunnels(arg0 context.Context, arg1 *types.QueryTunnelsRequest) (*types.QueryTunnelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tunnels", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryTunnelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tunnels indicates an expected call of Tunnels.
func (mr *MockQueryServerMockRecorder) Tunnels(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tunnels", reflect.TypeOf((*MockQueryServer)(nil).Tunnels), arg0, arg1)
}
