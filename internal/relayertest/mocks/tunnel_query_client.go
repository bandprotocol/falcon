// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bandprotocol/chain/v3/x/tunnel/types (interfaces: QueryClient)
//
// Generated by this command:
//
//	mockgen -package mocks -mock_names QueryClient=MockTunnelQueryClient -destination internal/relayertest/mocks/tunnel_query_client.go github.com/bandprotocol/chain/v3/x/tunnel/types QueryClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/bandprotocol/chain/v3/x/tunnel/types"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTunnelQueryClient is a mock of QueryClient interface.
type MockTunnelQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockTunnelQueryClientMockRecorder
	isgomock struct{}
}

// MockTunnelQueryClientMockRecorder is the mock recorder for MockTunnelQueryClient.
type MockTunnelQueryClientMockRecorder struct {
	mock *MockTunnelQueryClient
}

// NewMockTunnelQueryClient creates a new mock instance.
func NewMockTunnelQueryClient(ctrl *gomock.Controller) *MockTunnelQueryClient {
	mock := &MockTunnelQueryClient{ctrl: ctrl}
	mock.recorder = &MockTunnelQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTunnelQueryClient) EXPECT() *MockTunnelQueryClientMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockTunnelQueryClient) Deposit(ctx context.Context, in *types.QueryDepositRequest, opts ...grpc.CallOption) (*types.QueryDepositResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deposit", varargs...)
	ret0, _ := ret[0].(*types.QueryDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockTunnelQueryClientMockRecorder) Deposit(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockTunnelQueryClient)(nil).Deposit), varargs...)
}

// Deposits mocks base method.
func (m *MockTunnelQueryClient) Deposits(ctx context.Context, in *types.QueryDepositsRequest, opts ...grpc.CallOption) (*types.QueryDepositsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deposits", varargs...)
	ret0, _ := ret[0].(*types.QueryDepositsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposits indicates an expected call of Deposits.
func (mr *MockTunnelQueryClientMockRecorder) Deposits(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposits", reflect.TypeOf((*MockTunnelQueryClient)(nil).Deposits), varargs...)
}

// Packet mocks base method.
func (m *MockTunnelQueryClient) Packet(ctx context.Context, in *types.QueryPacketRequest, opts ...grpc.CallOption) (*types.QueryPacketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Packet", varargs...)
	ret0, _ := ret[0].(*types.QueryPacketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Packet indicates an expected call of Packet.
func (mr *MockTunnelQueryClientMockRecorder) Packet(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packet", reflect.TypeOf((*MockTunnelQueryClient)(nil).Packet), varargs...)
}

// Packets mocks base method.
func (m *MockTunnelQueryClient) Packets(ctx context.Context, in *types.QueryPacketsRequest, opts ...grpc.CallOption) (*types.QueryPacketsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Packets", varargs...)
	ret0, _ := ret[0].(*types.QueryPacketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Packets indicates an expected call of Packets.
func (mr *MockTunnelQueryClientMockRecorder) Packets(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packets", reflect.TypeOf((*MockTunnelQueryClient)(nil).Packets), varargs...)
}

// Params mocks base method.
func (m *MockTunnelQueryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockTunnelQueryClientMockRecorder) Params(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockTunnelQueryClient)(nil).Params), varargs...)
}

// TotalFees mocks base method.
func (m *MockTunnelQueryClient) TotalFees(ctx context.Context, in *types.QueryTotalFeesRequest, opts ...grpc.CallOption) (*types.QueryTotalFeesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TotalFees", varargs...)
	ret0, _ := ret[0].(*types.QueryTotalFeesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalFees indicates an expected call of TotalFees.
func (mr *MockTunnelQueryClientMockRecorder) TotalFees(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalFees", reflect.TypeOf((*MockTunnelQueryClient)(nil).TotalFees), varargs...)
}

// Tunnel mocks base method.
func (m *MockTunnelQueryClient) Tunnel(ctx context.Context, in *types.QueryTunnelRequest, opts ...grpc.CallOption) (*types.QueryTunnelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tunnel", varargs...)
	ret0, _ := ret[0].(*types.QueryTunnelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tunnel indicates an expected call of Tunnel.
func (mr *MockTunnelQueryClientMockRecorder) Tunnel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tunnel", reflect.TypeOf((*MockTunnelQueryClient)(nil).Tunnel), varargs...)
}

// Tunnels mocks base method.
func (m *MockTunnelQueryClient) Tunnels(ctx context.Context, in *types.QueryTunnelsRequest, opts ...grpc.CallOption) (*types.QueryTunnelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tunnels", varargs...)
	ret0, _ := ret[0].(*types.QueryTunnelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tunnels indicates an expected call of Tunnels.
func (mr *MockTunnelQueryClientMockRecorder) Tunnels(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tunnels", reflect.TypeOf((*MockTunnelQueryClient)(nil).Tunnels), varargs...)
}
