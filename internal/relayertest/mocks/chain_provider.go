// Code generated by MockGen. DO NOT EDIT.
// Source: falcon/chains/provider.go
//
// Generated by this command:
//
//	mockgen -source=falcon/chains/provider.go -package mocks -destination internal/falcontest/mocks/chain_provider.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/bandprotocol/falcon/relayer/chains/types"
	gomock "go.uber.org/mock/gomock"
)

// MockChainProvider is a mock of ChainProvider interface.
type MockChainProvider struct {
	ctrl     *gomock.Controller
	recorder *MockChainProviderMockRecorder
	isgomock struct{}
}

// MockChainProviderMockRecorder is the mock recorder for MockChainProvider.
type MockChainProviderMockRecorder struct {
	mock *MockChainProvider
}

// NewMockChainProvider creates a new mock instance.
func NewMockChainProvider(ctrl *gomock.Controller) *MockChainProvider {
	mock := &MockChainProvider{ctrl: ctrl}
	mock.recorder = &MockChainProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainProvider) EXPECT() *MockChainProviderMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockChainProvider) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockChainProviderMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockChainProvider)(nil).Connect))
}

// QueryTunnelInfo mocks base method.
func (m *MockChainProvider) QueryTunnelInfo(tunnelID uint64, tunnelDestinationAddr string) (*types.Tunnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTunnelInfo", tunnelID, tunnelDestinationAddr)
	ret0, _ := ret[0].(*types.Tunnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTunnelInfo indicates an expected call of QueryTunnelInfo.
func (mr *MockChainProviderMockRecorder) QueryTunnelInfo(tunnelID, tunnelDestinationAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTunnelInfo", reflect.TypeOf((*MockChainProvider)(nil).QueryTunnelInfo), tunnelID, tunnelDestinationAddr)
}
