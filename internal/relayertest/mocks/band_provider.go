// Code generated by MockGen. DO NOT EDIT.
// Source: relayer/band/provider.go
//
// Generated by this command:
//
//	mockgen -source=relayer/band/provider.go -package mocks -destination internal/relayertest/mocks/band_provider.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/bandprotocol/chain/v3/x/bandtss/types"
	types0 "github.com/bandprotocol/chain/v3/x/tunnel/types"
	gomock "go.uber.org/mock/gomock"
)

// MockBandQueryClient is a mock of BandQueryClient interface.
type MockBandQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockBandQueryClientMockRecorder
	isgomock struct{}
}

// MockBandQueryClientMockRecorder is the mock recorder for MockBandQueryClient.
type MockBandQueryClientMockRecorder struct {
	mock *MockBandQueryClient
}

// NewMockBandQueryClient creates a new mock instance.
func NewMockBandQueryClient(ctrl *gomock.Controller) *MockBandQueryClient {
	mock := &MockBandQueryClient{ctrl: ctrl}
	mock.recorder = &MockBandQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBandQueryClient) EXPECT() *MockBandQueryClientMockRecorder {
	return m.recorder
}

// Packet mocks base method.
func (m *MockBandQueryClient) Packet(ctx context.Context, tunnelID, sequence uint64) (*types0.QueryPacketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packet", ctx, tunnelID, sequence)
	ret0, _ := ret[0].(*types0.QueryPacketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Packet indicates an expected call of Packet.
func (mr *MockBandQueryClientMockRecorder) Packet(ctx, tunnelID, sequence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packet", reflect.TypeOf((*MockBandQueryClient)(nil).Packet), ctx, tunnelID, sequence)
}

// Signing mocks base method.
func (m *MockBandQueryClient) Signing(ctx context.Context, signingID uint64) (*types.QuerySigningResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signing", ctx, signingID)
	ret0, _ := ret[0].(*types.QuerySigningResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signing indicates an expected call of Signing.
func (mr *MockBandQueryClientMockRecorder) Signing(ctx, signingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signing", reflect.TypeOf((*MockBandQueryClient)(nil).Signing), ctx, signingID)
}

// Tunnel mocks base method.
func (m *MockBandQueryClient) Tunnel(ctx context.Context, tunnelID uint64) (*types0.QueryTunnelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tunnel", ctx, tunnelID)
	ret0, _ := ret[0].(*types0.QueryTunnelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tunnel indicates an expected call of Tunnel.
func (mr *MockBandQueryClientMockRecorder) Tunnel(ctx, tunnelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tunnel", reflect.TypeOf((*MockBandQueryClient)(nil).Tunnel), ctx, tunnelID)
}
