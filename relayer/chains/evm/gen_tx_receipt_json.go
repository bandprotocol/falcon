// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package evm

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*txResultMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t TxReceipt) MarshalJSON() ([]byte, error) {
	type TxReceipt struct {
		Status            hexutil.Uint64 `json:"status"`
		GasUsed           hexutil.Uint64 `json:"gasUsed"`
		EffectiveGasPrice *hexutil.Big   `json:"effectiveGasPrice"`
		BlockNumber       *hexutil.Big   `json:"blockNumber,omitempty"`
	}
	var enc TxReceipt
	enc.Status = hexutil.Uint64(t.Status)
	enc.GasUsed = hexutil.Uint64(t.GasUsed)
	enc.EffectiveGasPrice = (*hexutil.Big)(t.EffectiveGasPrice)
	enc.BlockNumber = (*hexutil.Big)(t.BlockNumber)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *TxReceipt) UnmarshalJSON(input []byte) error {
	type TxReceipt struct {
		Status            *hexutil.Uint64 `json:"status"`
		GasUsed           *hexutil.Uint64 `json:"gasUsed"`
		EffectiveGasPrice *hexutil.Big    `json:"effectiveGasPrice"`
		BlockNumber       *hexutil.Big    `json:"blockNumber,omitempty"`
	}
	var dec TxReceipt
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Status != nil {
		t.Status = uint64(*dec.Status)
	}
	if dec.GasUsed != nil {
		t.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.EffectiveGasPrice != nil {
		t.EffectiveGasPrice = (*big.Int)(dec.EffectiveGasPrice)
	}
	if dec.BlockNumber != nil {
		t.BlockNumber = (*big.Int)(dec.BlockNumber)
	}
	return nil
}
